type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n\n        int machineMoney\
    \ = 550;\n        int[] machineMats = new int[4];\n        machineMats[0] = 400;\n\
    \        machineMats[1] = 540;\n        machineMats[2] = 120;\n        machineMats[3]\
    \ = 9;\n\n        int[][] coffeMats = new int[3][4];\n        coffeMats[0][0]\
    \ = 250; //espresso Watter\n        coffeMats[0][1] = 0; //espresso Milk\n   \
    \     coffeMats[0][2] = 16; //espresso beans\n        coffeMats[0][3] = 4; //espresso\
    \ cost\n\n        coffeMats[1][0] = 350; //latte Watter\n        coffeMats[1][1]\
    \ = 75; //latte Milk\n        coffeMats[1][2] = 20; //latte beans\n        coffeMats[1][3]\
    \ = 7; //espresso cost\n\n        coffeMats[2][0] = 200; //cappuccino Watter\n\
    \        coffeMats[2][1] = 100; //cappuccino Milk\n        coffeMats[2][2] = 12;\
    \ //cappuccino beans\n        coffeMats[2][3] = 6; //espresso cost\n\n       \
    \ showMachineMats(machineMats, machineMoney);\n\n        System.out.println();\n\
    \        System.out.println(\"Write action (buy, fill, take):\");\n        String\
    \ option = readString();\n\n        switch (option.toLowerCase()){\n         \
    \   case \"buy\":{\n                System.out.println(\"What do you want to buy?\
    \ 1 - espresso, 2 - latte, 3 - cappuccino:\");\n                int coffeCategory\
    \ = readInt();\n                machineMats[0] -= coffeMats[coffeCategory-1][0];\n\
    \                machineMats[1] -= coffeMats[coffeCategory-1][1];\n          \
    \      machineMats[2] -= coffeMats[coffeCategory-1][2];\n                machineMats[3]\
    \ -= 1;\n                machineMoney += coffeMats[coffeCategory-1][3];\n    \
    \            System.out.println();\n                showMachineMats(machineMats,\
    \ machineMoney);\n                break;\n            }\n            case \"fill\"\
    :{\n                machineMats = refillMachine(machineMats);\n              \
    \  System.out.println();\n                showMachineMats(machineMats, machineMoney);\n\
    \                break;\n            }\n            case \"take\":{\n        \
    \        System.out.println(\"I gave you $\"+machineMoney);\n                machineMoney\
    \ = 0;\n                System.out.println();\n                showMachineMats(machineMats,\
    \ machineMoney);\n                break;\n            }\n\n        }\n\n    }\n\
    \n    public static int readInt(){\n        Scanner scanner = new Scanner(System.in);\n\
    \        return scanner.nextInt();\n    }\n\n    public static String readString(){\n\
    \        Scanner scanner = new Scanner(System.in);\n        return scanner.next();\n\
    \    }\n\n    public static void showMachineMats(int[] machineMats, int money){\n\
    \        System.out.println(\"The coffe machine has:\");\n        System.out.println(machineMats[0]+\"\
    \ of water\");\n        System.out.println(machineMats[1]+\" of milk\");\n   \
    \     System.out.println(machineMats[2]+\" of coffee beans\");\n        System.out.println(machineMats[3]+\"\
    \ of disposable cups\");\n        System.out.println(money+\" of money\");\n \
    \   }\n\n    public static int[] refillMachine(int[] machineMatsData){\n\n   \
    \     int[] machineMats = machineMatsData;\n        System.out.println(\"Write\
    \ how many ml of water do you want to add:\");\n        machineMats[0] += readInt();\n\
    \n        System.out.println(\"Write how many ml of milk do you want to add:\"\
    );\n        machineMats[1] += readInt();\n\n        System.out.println(\"Write\
    \ how many grams of coffee beans do you want to add:\");\n        machineMats[2]\
    \ += readInt();\n\n        System.out.println(\"Write how many disposable cups\
    \ of coffee do you want to add:\");\n        machineMats[3] += readInt();\n\n\
    \        return machineMats;\n    }\n\n    public static int calculateCoffe(int[]\
    \ machineMats, int[] coffeCup){\n\n        /*System.out.println(\"Write how many\
    \ cups of coffee you will need:\");\n        int cupsneed = readInt();\n\n   \
    \     int cups = calculateHowMuchCoffeCaniDo(machineMats, coffeCup);\n\n     \
    \   if(cups == cupsneed)\n            System.out.println(\"Yes, I can make that\
    \ amount of coffee\");\n        else if(cups > cupsneed)\n            System.out.println(\"\
    Yes, I can make that amount of coffee (and even \"+(cups-cupsneed)+\" more than\
    \ that)\");\n        else\n            System.out.println(\"No, I can make only\
    \ \"+cups+\" cup(s) of coffee\");*/\n        \n        boolean flag = true;\n\
    \        int cups = 0;\n\n        do{\n            if(machineMats[0] < coffeCup[0]\
    \ || machineMats[1] < coffeCup[1] || machineMats[2] < coffeCup[2])\n         \
    \       flag = false;\n\n            if(flag){\n                cups++;\n    \
    \            machineMats[0] -= coffeCup[0];\n                machineMats[1] -=\
    \ coffeCup[1];\n                machineMats[2] -= coffeCup[2];\n            }\n\
    \n        }while(flag);\n\n        return cups;\n    }\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 5
